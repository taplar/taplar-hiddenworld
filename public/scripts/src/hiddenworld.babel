;let Hiddenworld = ( ( $, window, document, undefined ) => {
	let instance;

	HTMLCollection.prototype.toArray = function () {
		return Array.prototype.map.call( this, ( element ) => element );
	};

	function buildApi () {
		let variables = {
			allTowns: {
				'1': 'Alzas'
				, '2': 'Altal'
				, '3': 'Bren'
				, '4': 'Brune Isle'
				, '5': 'Corollia'
				, '6': 'Dolence Isle'
				, '7': 'Elem'
				, '8': 'Fel'
				, '9': 'Feldar'
				, '10': 'Fodros'
				, '11': 'Komor'
				, '12': 'Lucrien'
				, '13': 'Luthien'
				, '14': 'Mogorva'
				, '15': 'Torvain'
				, '16': 'Wastelands'
				, '17': 'Zalta'
			}
		};

		let functions = {
			bindCoreMainMenuLink () {
				document.getElementById( 'core-main-menu-link' ).addEventListener( 'click', function () {
					document.getElementsByClassName( 'result-container' ).toArray().forEach( ( element ) =>
						element.parentNode.removeChild( element )
					);

					document.getElementById( 'welcome' ).classList.remove( 'core-hide' );
				} );
			}
			, bindCoreMenuOptions () {
				document.getElementsByClassName( 'core-menu-option' ).toArray().forEach( ( element ) =>
					element.addEventListener( 'click', functions.processCoreMenuOption )
				);
			}
			, buildAccessoriesResultMap ( accessories ) {
				return accessories.reduce( ( results, accessory, towns, properties ) => {
					towns = accessory.towns;
					
					if ( towns.indexOf( 'Located in ' ) === 0 ) {
						towns = towns.slice( 11 );
					}
					
					properties = [
						{ class: 'level', numeric: 'numeric', value: accessory.level }
						, { class: 'name', numeric: '', value: accessory.name }
						, { class: 'element', numeric: '', value: accessory.element }
						, { class: 'effect', numeric: '', value: accessory.effect.split( /[,][ ]?/ ).join( '<br>' ) }
						, { class: 'location', numeric: '', value: towns.split( /[,][ ]?/ ).join( '<br>' ) }
					];
					
					results.push( { properties: properties } );
					
					return results;
				}, [] );
			}
			, buildArmoursResultMap ( armours ) {
				return armours.reduce( ( results, armour, towns, properties ) => {
					towns = armour.towns;
					
					if ( towns.indexOf( 'Located in ' ) === 0 ) {
						towns = towns.slice( 11 );
					}
					
					properties = [
						{ class: 'level', numeric: 'numeric', value: armour.level }
						, { class: 'name', numeric: '', value: armour.name }
						, { class: 'element', numeric: '', value: armour.element }
						, { class: 'absorb', numeric: 'numeric', value: armour.absorb }
						, { class: 'evade', numeric: 'numeric', value: armour.evade }
						, { class: 'location', numeric: '', value: towns.split( ', ' ).join( '<br>' ) }
					];
					
					results.push( { properties: properties } );
					
					return results;
				}, [] );
			}
			, buildDonationsResultMap ( donations ) {
				return donations.reduce( ( results, donation, properties ) => {
					properties = [
						{ class: 'level', numeric: 'numeric', value: donation.level }
						, { class: 'donation', numeric: 'numeric', value: donation.donation }
					];
					
					results.push( { properties: properties } );
					
					return results;
				}, [] );
			}
			, buildMonstersResultMap ( monsters, selectedTown ) {
				return monsters.reduce( ( results, monster, town, properties ) => {
					if ( monster.place ) {
						town = monster.place;
					} else {
						town = selectedTown;
					}
					
					properties = [
						{ class: 'level', numeric: 'numeric', value: monster.level }
						, { class: 'name', numeric: '', value: monster.name }
						, { class: 'location', numeric: '', value: variables.allTowns[ town ] }
					];
					
					results.push( { properties: properties } );
					
					return results;
				}, [] );
			}
			, buildPotionsResultMap ( potions ) {
				return potions.reduce( ( results, potion, properties ) => {
					properties = [
						{ class: 'level', numeric: 'numeric', value: potion.levelmin }
						, { class: 'name', numeric: '', value: potion.name }
						, { class: 'levelmax', numeric: 'numeric', value: potion.levelmax }
						, { class: 'effect', numeric: '', value: potion.effect }
					];
					
					results.push( { properties: properties } );
					
					return results;
				}, [] );
			}
			, buildWeaponsResultMap ( weapons ) {
				return weapons.reduce( ( results, weapon, properties ) => {
					properties = [
						{ class: 'level', numeric: 'numeric', value: weapon.level }
						, { class: 'name', numeric: '', value: weapon.name }
						, { class: 'element', numeric: '', value: weapon.element }
						, { class: 'damage', numeric: 'numeric', value: weapon.damage }
						, { class: 'location', numeric: '', value: weapon.towns.split( ', ' ).join( '<br>' ) }
					];
					
					results.push( { properties: properties } );
					
					return results;
				}, [] );
			}
			, displayAccessories ( accessories ) {
				accessories = Templates.getInstance().buildTemplate( 'results-template', {
					resultType: 'items'
					, resultLabel: 'Accessories'
					, resultLabels: [
						{ label: 'Lv' }
						, { label: 'Name' }
						, { label: 'Element' }
						, { label: 'Effect' }
						, { label: 'Location' }
					]
					, results: functions.buildAccessoriesResultMap( accessories )
				} );
				
				document.getElementById( 'core-content' ).innerHTML += accessories;
			}
			, displayArmours ( armours ) {
				armours = Templates.getInstance().buildTemplate( 'results-template', {
					resultType: 'armours'
					, resultLabel: 'Armours'
					, resultLabels: [
						{ label: 'Lv' }
						, { label: 'Name' }
						, { label: 'Element' }
						, { label: 'Absorb' }
						, { label: 'Evade<br>(%)' }
						, { label: 'Location' }
					]
					, results: functions.buildArmoursResultMap( armours )
				} );
				
				document.getElementById( 'core-content' ).innerHTML += armours;
			}
			, displayDonations ( donations ) {
				donations = Templates.getInstance().buildTemplate( 'results-template', {
					resultType: 'donations'
					, resultLabel: 'Donations'
					, resultLabels: [
						{ label: 'Lv' }
						, { label: 'Amount' }
					]
					, results: functions.buildDonationsResultMap( donations )
				} );
				
				document.getElementById( 'core-content' ).innerHTML += donations;
			}
			, displayEndpoint ( endpoint, selectedValue ) {
				let coreSpinner = document.getElementById( 'core-spinner-state' );

				coreSpinner.checked = true;
				
				$.getJSON( 'api/equipment/'+ endpoint )
					.then( ( data ) => functions.displayFilterResults( data, selectedValue ) )
					.always( () => coreSpinner.checked = false );
			}
			, displayFilterResults ( results, searchValue ) {
				document.getElementById( 'welcome' ).classList.add( 'core-hide' );
				
				if ( results.donations ) functions.displayDonations( results.donations );
				if ( results.weapons ) functions.displayWeapons( results.weapons );
				if ( results.armours ) functions.displayArmours( results.armours );
				if ( results.accessories ) functions.displayAccessories( results.accessories );
				if ( results.potions ) functions.displayPotions( results.potions );
				if ( results.monsters ) functions.displayMonsters( results.monsters, searchValue );
			}
			, displayMonsters ( monsters, selectedTown ) {
				monsters = Templates.getInstance().buildTemplate( 'results-template', {
					resultType: 'monsters'
					, resultLabel: 'Monsters'
					, resultLabels: [
						{ label: 'Lv' }
						, { label: 'Name' }
						, { label: 'Location' }
					]
					, results: functions.buildMonstersResultMap( monsters, selectedTown )
				} );
				
				document.getElementById( 'core-content' ).innerHTML += monsters;
			}
			, displayPotions ( potions ) {
				potions = Templates.getInstance().buildTemplate( 'results-template', {
					resultType: 'potions'
					, resultLabel: 'Potions'
					, resultLabels: [
						{ label: 'Lv' }
						, { label: 'Name' }
						, { label: 'Lv Max' }
						, { label: 'Effect' }
					]
					, results: functions.buildPotionsResultMap( potions )
				} );
				
				document.getElementById( 'core-content' ).innerHTML += potions;
			}
			, displayWeapons ( weapons ) {
				weapons = Templates.getInstance().buildTemplate( 'results-template', {
					  resultType: 'weapons'
					, resultLabel: 'Weapons'
					, resultLabels: [
						{ label: 'Lv' }
						, { label: 'Name' }
						, { label: 'Element' }
						, { label: 'Damage' }
						, { label: 'Location' }
					]
					, results: functions.buildWeaponsResultMap( weapons )
				} );
				
				document.getElementById( 'core-content' ).innerHTML += weapons;
			}
			, processCoreMenuOption ( event ) {
				event.preventDefault();

				document.getElementById( 'core-no-menu' ).checked = true;

				let selectedValue = this.getAttribute( 'data-value' )
					, endpoint = this.getAttribute( 'data-endpoint' ) +'/'+ selectedValue;
				
				functions.displayEndpoint( endpoint, selectedValue );
				history.pushState( { endpoint: endpoint, selectedValue: selectedValue }, document.title, document.location.href );
			}
		};

		let api = {
			privateFunctions: functions
			, privateVariables: variables
			, initialize () {
				let methods = [
					'bindCoreMenuOptions'
					, 'bindCoreMainMenuLink'
				];

				methods.forEach( ( method ) => {
					functions[ method ]();
					delete functions[ method ];
				} );

				delete api.initialize;
			}
		};

		return api;
	}

	return {
		getInstance () {
			if ( !instance ) {
				instance = buildApi();

				delete instance.privateFunctions;
				delete instance.privateVariables;
			}

			return instance;
		}
		, getTestInstance: buildApi
	};
} )( jQuery, window, document );

Hiddenworld.getInstance().initialize();
